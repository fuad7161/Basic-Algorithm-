#include <bits/stdc++.h>
using namespace std;

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}
#define int long long
const int N =3e4+5;
#define all(n) n.begin() , n.end()
#define vout(v) for (auto z: v) cout << z << " "; cout << endl;
int n;
int a[N];
vector<int>st[5*N];

vector<int> merge(vector<int>& A,vector<int>& B){
    int n = A.size();
    int m = B.size();
    int i = 0;
    int j = 0;
    vector<int> z;
    while(i<n and j<m){
        if(A[i] < B[j]){
            z.push_back(A[i]);
            i++;
        }else{
            z.push_back(B[j]);
            j++;
        }
    }
    while(i<n) z.push_back(A[i++]);
    while(j<m) z.push_back(B[j++]);
    return z;
}
void build_tree(int idx, int ss, int se){
    if(ss == se){
        st[idx].push_back(a[ss]);
        return ;
    }

    int mid = (ss+se)/2;
    build_tree(idx*2 , ss , mid);
    build_tree(idx*2+1 , mid+1 , se);
    st[idx] = merge(st[idx*2] , st[idx*2+1]);
}

int query(int idx , int ss, int se, int l , int r, int val){
    if(r < ss or se < l)return 0;
    if(l<= ss and se <= r){
        int pos = upper_bound(all(st[idx]) , val) - st[idx].begin();
        int z = st[idx].size() - pos;
        return z;
    }
    int mid = (ss+se)/2;
    int Left = query(idx*2 , ss, mid, l , r , val);
    int Right = query(idx*2+1 , mid+1, se ,l , r , val);
    return Left+Right;
}

signed solve(){

    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>a[i];
    }

    build_tree(1,1,n);
    int q;
    cin>>q;

    int x,y,v;
    while(q--){
        cin>>x>>y>>v;
        int t = query(1,1,n,x,y,v);
        cout<<t<<endl;
    }

    return 0;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);int test = 1;
    // cin>>test;
    while (test--)solve();return 0;
}
