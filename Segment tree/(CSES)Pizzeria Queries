#include <bits/stdc++.h>
using namespace std;

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}
#define int long long
const int N = 2e5+5;
int a[N];
pair<int,int> st_l[4*N];
pair<int,int> st_r[4*N];
int n;
 
void built_tree_left(int idx,  int ss , int se){
    if(ss == se){
        st_l[idx] = {a[ss]+ss , ss};
        return;
    }
    int mid = (ss+se)/2;
    built_tree_left(idx*2 , ss , mid);
    built_tree_left(idx*2+1 , mid+1 , se);
    if(st_l[idx*2]<st_l[idx*2+1]){
        st_l[idx] = st_l[idx*2];
    }else{
        st_l[idx] = st_l[idx*2+1];
    }
}
 
void update_left(int idx , int ss, int se , int x,int val){
    if(x < ss or se < x)return ;
    if(ss == se){
        st_l[idx] = {val+ss,ss};
        return;
    }
    int mid = (ss+se)/2;
    if(x <= mid){
        update_left(idx*2,ss,mid,x,val);
    }else{
        update_left(idx*2+1,mid+1,se , x,val);
    }
    if(st_l[idx*2]<st_l[idx*2+1]){
        st_l[idx] = st_l[idx*2];
    }else{
        st_l[idx] = st_l[idx*2+1];
    }
}

pair<int,int> query_left(int idx , int ss , int se , int qs, int qe){
    if(qe < ss  or se < qs)return {1e18 , n};
    if(qs<=ss  and se <=qe){
        return st_l[idx];
    }
    int mid = (ss+se)/2;
    return min(query_left(idx*2,ss,mid,qs,qe),query_left(idx*2+1,mid+1,se,qs,qe));
}

void built_tree_right(int idx,  int ss , int se){
    if(ss == se){
        st_r[idx] = {a[ss]+(n-ss+1) ,ss};
        return;
    }
    int mid = (ss+se)/2;
    built_tree_right(idx*2 , ss , mid);
    built_tree_right(idx*2+1 , mid+1 , se);
    if(st_r[idx*2]<=st_r[idx*2+1]){
        st_r[idx] = st_r[idx*2];
    }else{
        st_r[idx] = st_r[idx*2+1];
    }
}
 
void update_right(int idx , int ss, int se , int x,int val){
    if(x < ss or se < x)return ;
    if(ss == se){
        st_r[idx] = {val+(n-ss+1) , ss};
        return;
    }
    int mid = (ss+se)/2;
    if(x <= mid){
        update_right(idx*2,ss,mid,x,val);
    }else{
        update_right(idx*2+1,mid+1,se , x,val);
    }
    if(st_r[idx*2]<=st_r[idx*2+1]){
        st_r[idx] = st_r[idx*2];
    }else{
        st_r[idx] = st_r[idx*2+1];
    }
}
 
pair<int,int> query_right(int idx , int ss , int se , int qs, int qe){
    if(qe < ss  or se < qs)return {1e18 , n};
    if(qs<=ss  and se <=qe){
        return st_r[idx];
    }
    int mid = (ss+se)/2;
    return min(query_right(idx*2,ss,mid,qs,qe),query_right(idx*2+1,mid+1,se,qs,qe));
}

signed solve(){

    int q;
    cin>>n>>q;

    for(int i=0;i<4*n;i++){
        st_r[i] = {1e18,n};
        st_l[i] = {1e18,n};
    }
    for(int i=1;i<=n;i++){
        cin>>a[i];
    }

    built_tree_left(1,1,n);
    built_tree_right(1,1,n);


    while(q--){
        int t;
        cin>>t;

        int x,y;
        if(t == 2){
            cin>>y;
            pair<int,int> left1 = query_left(1,1,n,1,y);
            pair<int,int> left2 = query_left(1,1,n,y,n);
            pair<int,int> right1 = query_right(1,1,n,1,y);
            pair<int,int> right2 = query_right(1,1,n,y,n);
            cout<<min({a[left1.second]+(y - left1.second) , a[left2.second]+(left2.second - y) , a[right1.second]+(y - right1.second) , a[right2.second]+(right2.second - y)})<<endl;
        }else{
            cin>>x>>y;
            a[x] = y;
            update_left(1,1,n,x,y);
            update_right(1,1,n,x,y);
            
        }
    }

 
    return 0;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);int test = 1;
    // cin>>test;
    while (test--)solve();return 0;
}
