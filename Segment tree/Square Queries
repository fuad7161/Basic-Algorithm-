//https://lightoj.com/problem/square-queries

#include <bits/stdc++.h>
using namespace std;

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}
#define int long long
const int N = 500;
int t[4*N][4*N];
int a[N][N];
int n;
void build_y(int vx, int lx,int rx,int vy,int ly, int ry){
	if(ly == ry){
		if(lx == rx){
			t[vx][vy] = a[lx][ly];
		}else{
			// t[vx][vy] = t[vx*2][vy] + t[vx*2+1][vy];
			t[vx][vy] = max(t[vx*2][vy] , t[vx*2+1][vy]);
		}
	}else{
		int my = (ly+ry)/2;
		build_y(vx,lx,rx,vy*2,ly,my);
		build_y(vx,lx,rx,vy*2+1,my+1,ry);
		// t[vx][vy] = t[vx][vy*2] + t[vx][vy*2+1];
		t[vx][vy] = max(t[vx][vy*2] , t[vx][vy*2+1]);
	}
}

void build_x(int vx,int lx,int rx){
	if(lx != rx){
		int mx = (lx+rx)/2;
		build_x(vx*2 , lx , mx);
		build_x(vx*2+1 , mx+1 , rx);
	}
	build_y(vx , lx , rx , 1, 0 , n-1);
}

int sum_y(int vx , int vy , int tly,int try_,int ly,int ry){
	if(ly > ry)return 0;
	if(ly == tly and try_ == ry){
		return t[vx][vy];
	}
	int tmy = (tly+try_)/2;
	return max(sum_y(vx,vy*2,tly,tmy,ly,min(ry,tmy)),
	sum_y(vx,vy*2+1,tmy+1,try_,max(ly,tmy+1),ry));
}

int sum_x(int vx, int tlx,int trx,int lx,int rx,int ly,int ry){
	if(lx > rx)return 0;
	if(lx == tlx and trx == rx)return sum_y(vx,1,0,n-1,ly,ry);
	int tmx = (tlx+trx)/2;
	return max(sum_x(vx*2,tlx,tmx,lx,min(rx,tmx),ly,ry),
	sum_x(vx*2+1,tmx+1,trx,max(lx,tmx+1),rx,ly,ry));
}
int tc = 1;
signed solve(){
	int q;
 	cin>>n>>q;

 	for(int i=0;i<n;i++)   {
 		for(int j=0;j<n;j++){
 			cin>>a[i][j];
 		}
 	}

 	build_x(1,0,n-1);
 	cout<<"Case "<<tc++<<":\n";
 	while(q--){
 		int lx,ly,rx,ry  ,d;
 		cin>>lx>>ly>>d;lx--;ly--;
 		rx = lx+d-1;
 		ry = ly+d-1;
 		// error(lx,ly,rx,ry)
 		int sum = sum_x(1,0,n-1,lx,rx,ly,ry);
 		cout<<sum<<endl;
 	}


    return 0;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);int test = 1;
    cin>>test;
    while (test--)solve();return 0;
}
