//https://www.hackerrank.com/contests/modena-coding-oct-2017/challenges/kthzero
#include <bits/stdc++.h>
using namespace std;

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}
#define int long long
const int N = 2e5+5;
int a[N];
int st[4*N];
 
void built_tree(int idx,  int ss , int se){
    if(ss == se){
        st[idx] = a[ss];
        return;
    }
    int mid = (ss+se)/2;
    built_tree(idx*2 , ss , mid);
    built_tree(idx*2+1 , mid+1 , se);
    st[idx] = st[idx*2] + st[idx*2+1];
}
 
void update(int idx , int ss, int se , int x,int val){
    if(x < ss or se < x)return ;
    if(ss == se){
        st[idx] = val;
        return;
    }
    int mid = (ss+se)/2;
    if(x <= mid){
        update(idx*2,ss,mid,x,val);
    }else{
        update(idx*2+1,mid+1,se , x,val);
    }
    st[idx] = st[idx*2]+st[idx*2+1];
}
 
 
int query(int idx , int ss , int se , int kth){

    if(st[idx] < kth)return -1;
    if(ss == se){
        return ss;
    }
    int mid = (ss+se)/2;
    int l = 0;
    int r = 0;
    if(kth > st[idx*2]){
        l = query(idx*2+1 , mid+1,se ,kth-st[idx*2]);
    }else {
        r = query(idx*2 , ss , mid , kth);
    }
    return max(l , r);
}

signed solve(){

    int n , q;
    cin>>n>>q;

    int x;
    for(int i=1;i<=n;i++){
        cin>>x;
        if(x == 0){
            a[i] = 1;
        }else{
            a[i] = 0;
        }
    }

    built_tree(1,1,n);

    int y;
    while(q--){
        int t;
        cin>>t;
        if(t == 1){
            cin>>x;
            int z = query(1,1,n,x);
            if(z == -1){
                cout<<"NO"<<endl;
            }else{
                cout<<z-1<<endl;
            }
        }else{
            cin>>x>>y;
            update(1,1,n,x+1 , (y==0));
        }
    }

    return 0;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);int test = 1;
    // cin>>test;
    while (test--)solve();return 0;
}
