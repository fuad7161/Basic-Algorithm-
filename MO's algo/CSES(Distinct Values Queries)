#include <bits/stdc++.h>
using namespace std;

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}
#define int long long

const int N = 3e5+5;
#define blk 555
struct query{
    int l;
    int r;
    int id;
}q[N];
bool cmp(query a, query b){
    if(a.l / blk != b.l / blk){
        return a.l < b.l;
    }else{
        if(a.l / blk & 1){
            return a.r < b.r;
        }else{
            return a.r > b.r;
        }
    }
}
/*bool cmp(query a, query b){
    if(a.l/blk != b.l/blk) return a.l/blk < b.l/blk;
    return a.r < b.r;
}*/
int n,k;
int a[N];
int cnt = 0; 

int vis[N];
void add(int i){
    if(vis[a[i]] == 0)cnt++;
    vis[a[i]]++;
}
 
void remove(int i){
    vis[a[i]]--;
    if(vis[a[i]] == 0)cnt--;
}

signed solve(){

    cin>>n>>k;
    vector<pair<int,int>> a1(n);
    for(int i=0;i<n;i++){
        cin>>a1[i].first;
        a1[i].second = i;

    }
    sort(a1.begin() , a1.end());
    vector<pair<int,int>> tem;
    int mara = 1;
    for(int i=1;i<n;i++){
        tem.push_back({a1[i-1].second , mara});
        if(a1[i].first != a1[i-1].first){
            mara++;
        }
    }
    if(a1[n-1].first != a1[n-2].first)mara++;
    tem.push_back({a1[n-1].second , mara});

    sort(tem.begin() , tem.end());

    for(int i=0;i<n;i++){
        a[i+1] = tem[i].second;
    }

    // for(int i=1;i<=n;i++){
    //     cout<<a[i]<<" ";
    // }cout<<endl;
    for(int i=0;i<k;i++){
        int l , r;
        cin>>l>>r;
        q[i].l = l;
        q[i].r = r;
        q[i].id = i;
    }

    sort(q , q+n , cmp);

    int ans[k];
    int L = 0;
    int R = 0;
    for(int i=0;i<k;i++){
        int nextL = q[i].l;
        int nextR = q[i].r;
        while(R < nextR){
            add(++R);
        }

        while(R > nextR){
            remove(R--);
        }

        while(L < nextL){
            remove(L++);
        }

        while(L > nextL){
            add(--L);
        }

        ans[q[i].id] = cnt;
    }


    for(int i=0;i<k;i++){
        cout<<ans[i]<<endl;
    }
    return 0;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);int test = 1;
    // cin>>test;
    while (test--)solve();return 0;
}
